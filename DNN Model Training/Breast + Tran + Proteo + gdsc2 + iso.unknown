{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"id":"M5HF6MmfcjwR"},"outputs":[],"source":["import pandas as pd\n","import numpy as np"]},{"cell_type":"code","source":["from google.colab import drive\n","drive.mount('/content/drive')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"F0sWDwL84ote","executionInfo":{"status":"ok","timestamp":1745060954373,"user_tz":-480,"elapsed":29847,"user":{"displayName":"MDS02","userId":"02127473625043959214"}},"outputId":"9aa8c8db-16fe-4087-d33d-94ea40160384"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","source":["# Group\n","!ls '/content/drive/My Drive/Colab Notebooks'"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CLlGbW844xtF","executionInfo":{"status":"ok","timestamp":1745061007417,"user_tz":-480,"elapsed":1806,"user":{"displayName":"MDS02","userId":"02127473625043959214"}},"outputId":"39bb2612-bb67-4351-c2c2-05b721822ddf"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":[" BC_trans_gdsc2_iso.csv\n"," BC_trans_genom_gdsc2_iso.csv\n"," BC_trans_proteo_gdsc2_iso.csv\n","'Breast + Tran + gdsc2 + iso'\n","'Breast + Tran + Genom + gdsc2 + iso'\n","'Breast + Tran + Proteo + gdsc2 + iso'\n"," CC_BC_trans_gdsc2_iso.csv\n"," CC_BC_trans_proteo_gdsc2_iso.csv\n","'Colon & Breast + Trans + gdsc2 + iso.ipynb'\n","'Colon & Breast + Trans + Proteo + gdsc2 + iso'\n"," Experiment\n"," GDSC1\n"," pre-processing\n"," raw_data\n"]}]},{"cell_type":"code","source":["!ls '/content/drive/My Drive/Colab Notebooks/Experiment'"],"metadata":{"id":"Z0F4dbfkNNnr","executionInfo":{"status":"ok","timestamp":1745061008697,"user_tz":-480,"elapsed":79,"user":{"displayName":"MDS02","userId":"02127473625043959214"}},"outputId":"94402e94-b9c5-4b17-8a39-0d4a0cfa3443","colab":{"base_uri":"https://localhost:8080/"}},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["'Check prev & current transcript + gdsc + isoSMILES dataset'\n"," Prev_group_Drug_Breast_Cancer_Data.csv\n","'Previous group dataset Tran + gdsc2* + isosmiles'\n","'Testing PATIENCE values Tran + Proteo + gdsc2* + isosmiles'\n"]}]},{"cell_type":"markdown","metadata":{"id":"wFshTNLEpjbc"},"source":["## **Transcrip + Proteo Dataset**"]},{"cell_type":"code","source":["df = pd.read_csv(\"/content/drive/My Drive/Colab Notebooks/BC_trans_proteo_gdsc2_iso.csv\")\n","\n","df.drop(columns = ['Unnamed: 0'], inplace=True, axis=1)"],"metadata":{"id":"SCUcqeG943Bk"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":441},"executionInfo":{"elapsed":110,"status":"ok","timestamp":1745061190145,"user":{"displayName":"MDS02","userId":"02127473625043959214"},"user_tz":-480},"id":"b02Vqp_ohSXr","outputId":"4b0198ef-a604-4c7d-bd10-07dfc5be099f"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      DRUG_ID     DRUG_NAME      CCLE_Name  COSMIC_ID  TSPAN6 (7105)  \\\n","0        1003  Camptothecin   AU565_BREAST     910704       3.428946   \n","1        1004   Vinblastine   AU565_BREAST     910704       3.428946   \n","2        1005     Cisplatin   AU565_BREAST     910704       3.428946   \n","3        1006    Cytarabine   AU565_BREAST     910704       3.428946   \n","4        1007     Docetaxel   AU565_BREAST     910704       3.428946   \n","...       ...           ...            ...        ...            ...   \n","4028     2045       AMG-319  ZR7530_BREAST     909907       3.472488   \n","4029     2046       MK-8776  ZR7530_BREAST     909907       3.472488   \n","4030     2048   Vinorelbine  ZR7530_BREAST     909907       3.472488   \n","4031     2106    Uprosertib  ZR7530_BREAST     909907       3.472488   \n","4032     2169       AZD6482  ZR7530_BREAST     909907       3.472488   \n","\n","      TNMD (64102)  DPM1 (8813)  SCYL3 (57147)  C1orf112 (55732)  FGR (2268)  \\\n","0              0.0     6.869871       3.500802          4.319040    0.111031   \n","1              0.0     6.869871       3.500802          4.319040    0.111031   \n","2              0.0     6.869871       3.500802          4.319040    0.111031   \n","3              0.0     6.869871       3.500802          4.319040    0.111031   \n","4              0.0     6.869871       3.500802          4.319040    0.111031   \n","...            ...          ...            ...               ...         ...   \n","4028           0.0     5.959306       3.878725          3.646163    0.000000   \n","4029           0.0     5.959306       3.878725          3.646163    0.000000   \n","4030           0.0     5.959306       3.878725          3.646163    0.000000   \n","4031           0.0     5.959306       3.878725          3.646163    0.000000   \n","4032           0.0     5.959306       3.878725          3.646163    0.000000   \n","\n","      ...  247  248  249  250  251  252  253  254  255   LN_IC50  \n","0     ...    0    1    0    1    0    0    0    0    0 -2.834766  \n","1     ...    1    0    1    0    1    0    0    0    0 -2.717499  \n","2     ...    0    0    0    0    0    0    0    0    0  2.928827  \n","3     ...    0    0    0    1    1    0    0    0    0  1.747744  \n","4     ...    0    1    1    1    1    0    0    0    0 -5.785839  \n","...   ...  ...  ...  ...  ...  ...  ...  ...  ...  ...       ...  \n","4028  ...    0    0    0    1    0    0    0    0    0  6.504184  \n","4029  ...    0    0    0    0    1    0    0    0    1  5.818486  \n","4030  ...    1    0    1    1    1    0    0    0    0  1.944143  \n","4031  ...    0    0    1    0    0    0    0    0    1  2.978849  \n","4032  ...    0    0    0    0    0    0    0    0    0  5.825014  \n","\n","[4033 rows x 19696 columns]"],"text/html":["\n","  <div id=\"df-f2545a08-69fe-4d55-9e89-78874237a3ab\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>DRUG_ID</th>\n","      <th>DRUG_NAME</th>\n","      <th>CCLE_Name</th>\n","      <th>COSMIC_ID</th>\n","      <th>TSPAN6 (7105)</th>\n","      <th>TNMD (64102)</th>\n","      <th>DPM1 (8813)</th>\n","      <th>SCYL3 (57147)</th>\n","      <th>C1orf112 (55732)</th>\n","      <th>FGR (2268)</th>\n","      <th>...</th>\n","      <th>247</th>\n","      <th>248</th>\n","      <th>249</th>\n","      <th>250</th>\n","      <th>251</th>\n","      <th>252</th>\n","      <th>253</th>\n","      <th>254</th>\n","      <th>255</th>\n","      <th>LN_IC50</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1003</td>\n","      <td>Camptothecin</td>\n","      <td>AU565_BREAST</td>\n","      <td>910704</td>\n","      <td>3.428946</td>\n","      <td>0.0</td>\n","      <td>6.869871</td>\n","      <td>3.500802</td>\n","      <td>4.319040</td>\n","      <td>0.111031</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-2.834766</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1004</td>\n","      <td>Vinblastine</td>\n","      <td>AU565_BREAST</td>\n","      <td>910704</td>\n","      <td>3.428946</td>\n","      <td>0.0</td>\n","      <td>6.869871</td>\n","      <td>3.500802</td>\n","      <td>4.319040</td>\n","      <td>0.111031</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-2.717499</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1005</td>\n","      <td>Cisplatin</td>\n","      <td>AU565_BREAST</td>\n","      <td>910704</td>\n","      <td>3.428946</td>\n","      <td>0.0</td>\n","      <td>6.869871</td>\n","      <td>3.500802</td>\n","      <td>4.319040</td>\n","      <td>0.111031</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2.928827</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1006</td>\n","      <td>Cytarabine</td>\n","      <td>AU565_BREAST</td>\n","      <td>910704</td>\n","      <td>3.428946</td>\n","      <td>0.0</td>\n","      <td>6.869871</td>\n","      <td>3.500802</td>\n","      <td>4.319040</td>\n","      <td>0.111031</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1.747744</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1007</td>\n","      <td>Docetaxel</td>\n","      <td>AU565_BREAST</td>\n","      <td>910704</td>\n","      <td>3.428946</td>\n","      <td>0.0</td>\n","      <td>6.869871</td>\n","      <td>3.500802</td>\n","      <td>4.319040</td>\n","      <td>0.111031</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-5.785839</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4028</th>\n","      <td>2045</td>\n","      <td>AMG-319</td>\n","      <td>ZR7530_BREAST</td>\n","      <td>909907</td>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>6.504184</td>\n","    </tr>\n","    <tr>\n","      <th>4029</th>\n","      <td>2046</td>\n","      <td>MK-8776</td>\n","      <td>ZR7530_BREAST</td>\n","      <td>909907</td>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>5.818486</td>\n","    </tr>\n","    <tr>\n","      <th>4030</th>\n","      <td>2048</td>\n","      <td>Vinorelbine</td>\n","      <td>ZR7530_BREAST</td>\n","      <td>909907</td>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1.944143</td>\n","    </tr>\n","    <tr>\n","      <th>4031</th>\n","      <td>2106</td>\n","      <td>Uprosertib</td>\n","      <td>ZR7530_BREAST</td>\n","      <td>909907</td>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2.978849</td>\n","    </tr>\n","    <tr>\n","      <th>4032</th>\n","      <td>2169</td>\n","      <td>AZD6482</td>\n","      <td>ZR7530_BREAST</td>\n","      <td>909907</td>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5.825014</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4033 rows × 19696 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f2545a08-69fe-4d55-9e89-78874237a3ab')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-f2545a08-69fe-4d55-9e89-78874237a3ab button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-f2545a08-69fe-4d55-9e89-78874237a3ab');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-3e8d3b67-1b2e-4d18-a3b7-0356233aa4f3\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-3e8d3b67-1b2e-4d18-a3b7-0356233aa4f3')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-3e8d3b67-1b2e-4d18-a3b7-0356233aa4f3 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_e779b9e2-86d1-4596-bf15-caf3d504b62f\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_e779b9e2-86d1-4596-bf15-caf3d504b62f button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":6}],"source":["df\n","# 4033 rows × 19696 columns"]},{"cell_type":"markdown","metadata":{"id":"ZQEGcaCdlXyK"},"source":["# **Perform the deep learning (transcrip + Proteo)**"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"JqSN2Sy1leNO"},"outputs":[],"source":["import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.callbacks import EarlyStopping\n","from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n","from scipy.stats import pearsonr\n","from sklearn.metrics import r2_score\n","from tensorflow.keras import backend as K"]},{"cell_type":"code","source":["# training\n","X = df.drop(columns=['DRUG_ID', 'DRUG_NAME', 'COSMIC_ID', 'LN_IC50', 'CCLE_Name'])\n","\n","X"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":441},"id":"WHbFJowG5Lsy","executionInfo":{"status":"ok","timestamp":1745061204616,"user_tz":-480,"elapsed":195,"user":{"displayName":"MDS02","userId":"02127473625043959214"}},"outputId":"4bcda6b3-4bec-4fc2-83aa-1b15bbce9820"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["      TSPAN6 (7105)  TNMD (64102)  DPM1 (8813)  SCYL3 (57147)  \\\n","0          3.428946           0.0     6.869871       3.500802   \n","1          3.428946           0.0     6.869871       3.500802   \n","2          3.428946           0.0     6.869871       3.500802   \n","3          3.428946           0.0     6.869871       3.500802   \n","4          3.428946           0.0     6.869871       3.500802   \n","...             ...           ...          ...            ...   \n","4028       3.472488           0.0     5.959306       3.878725   \n","4029       3.472488           0.0     5.959306       3.878725   \n","4030       3.472488           0.0     5.959306       3.878725   \n","4031       3.472488           0.0     5.959306       3.878725   \n","4032       3.472488           0.0     5.959306       3.878725   \n","\n","      C1orf112 (55732)  FGR (2268)  CFH (3075)  FUCA2 (2519)  GCLC (2729)  \\\n","0             4.319040    0.111031    0.084064      6.060264     5.312157   \n","1             4.319040    0.111031    0.084064      6.060264     5.312157   \n","2             4.319040    0.111031    0.084064      6.060264     5.312157   \n","3             4.319040    0.111031    0.084064      6.060264     5.312157   \n","4             4.319040    0.111031    0.084064      6.060264     5.312157   \n","...                ...         ...         ...           ...          ...   \n","4028          3.646163    0.000000    0.042644      4.711495     5.472488   \n","4029          3.646163    0.000000    0.042644      4.711495     5.472488   \n","4030          3.646163    0.000000    0.042644      4.711495     5.472488   \n","4031          3.646163    0.000000    0.042644      4.711495     5.472488   \n","4032          3.646163    0.000000    0.042644      4.711495     5.472488   \n","\n","      NFYA (4800)  ...  246  247  248  249  250  251  252  253  254  255  \n","0        3.838952  ...    0    0    1    0    1    0    0    0    0    0  \n","1        3.838952  ...    0    1    0    1    0    1    0    0    0    0  \n","2        3.838952  ...    0    0    0    0    0    0    0    0    0    0  \n","3        3.838952  ...    0    0    0    0    1    1    0    0    0    0  \n","4        3.838952  ...    0    0    1    1    1    1    0    0    0    0  \n","...           ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  \n","4028     3.932628  ...    0    0    0    0    1    0    0    0    0    0  \n","4029     3.932628  ...    0    0    0    0    0    1    0    0    0    1  \n","4030     3.932628  ...    0    1    0    1    1    1    0    0    0    0  \n","4031     3.932628  ...    0    0    0    1    0    0    0    0    0    1  \n","4032     3.932628  ...    1    0    0    0    0    0    0    0    0    0  \n","\n","[4033 rows x 19691 columns]"],"text/html":["\n","  <div id=\"df-1a54c207-95f2-462d-aa2f-bed5d6581308\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>TSPAN6 (7105)</th>\n","      <th>TNMD (64102)</th>\n","      <th>DPM1 (8813)</th>\n","      <th>SCYL3 (57147)</th>\n","      <th>C1orf112 (55732)</th>\n","      <th>FGR (2268)</th>\n","      <th>CFH (3075)</th>\n","      <th>FUCA2 (2519)</th>\n","      <th>GCLC (2729)</th>\n","      <th>NFYA (4800)</th>\n","      <th>...</th>\n","      <th>246</th>\n","      <th>247</th>\n","      <th>248</th>\n","      <th>249</th>\n","      <th>250</th>\n","      <th>251</th>\n","      <th>252</th>\n","      <th>253</th>\n","      <th>254</th>\n","      <th>255</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3.428946</td>\n","      <td>0.0</td>\n","      <td>6.869871</td>\n","      <td>3.500802</td>\n","      <td>4.319040</td>\n","      <td>0.111031</td>\n","      <td>0.084064</td>\n","      <td>6.060264</td>\n","      <td>5.312157</td>\n","      <td>3.838952</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3.428946</td>\n","      <td>0.0</td>\n","      <td>6.869871</td>\n","      <td>3.500802</td>\n","      <td>4.319040</td>\n","      <td>0.111031</td>\n","      <td>0.084064</td>\n","      <td>6.060264</td>\n","      <td>5.312157</td>\n","      <td>3.838952</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3.428946</td>\n","      <td>0.0</td>\n","      <td>6.869871</td>\n","      <td>3.500802</td>\n","      <td>4.319040</td>\n","      <td>0.111031</td>\n","      <td>0.084064</td>\n","      <td>6.060264</td>\n","      <td>5.312157</td>\n","      <td>3.838952</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3.428946</td>\n","      <td>0.0</td>\n","      <td>6.869871</td>\n","      <td>3.500802</td>\n","      <td>4.319040</td>\n","      <td>0.111031</td>\n","      <td>0.084064</td>\n","      <td>6.060264</td>\n","      <td>5.312157</td>\n","      <td>3.838952</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.428946</td>\n","      <td>0.0</td>\n","      <td>6.869871</td>\n","      <td>3.500802</td>\n","      <td>4.319040</td>\n","      <td>0.111031</td>\n","      <td>0.084064</td>\n","      <td>6.060264</td>\n","      <td>5.312157</td>\n","      <td>3.838952</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4028</th>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>0.042644</td>\n","      <td>4.711495</td>\n","      <td>5.472488</td>\n","      <td>3.932628</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4029</th>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>0.042644</td>\n","      <td>4.711495</td>\n","      <td>5.472488</td>\n","      <td>3.932628</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4030</th>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>0.042644</td>\n","      <td>4.711495</td>\n","      <td>5.472488</td>\n","      <td>3.932628</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4031</th>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>0.042644</td>\n","      <td>4.711495</td>\n","      <td>5.472488</td>\n","      <td>3.932628</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4032</th>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>0.042644</td>\n","      <td>4.711495</td>\n","      <td>5.472488</td>\n","      <td>3.932628</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4033 rows × 19691 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1a54c207-95f2-462d-aa2f-bed5d6581308')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-1a54c207-95f2-462d-aa2f-bed5d6581308 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-1a54c207-95f2-462d-aa2f-bed5d6581308');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-a9f16492-ccdb-491a-b9ca-70c44380d77c\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-a9f16492-ccdb-491a-b9ca-70c44380d77c')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-a9f16492-ccdb-491a-b9ca-70c44380d77c button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_65d32aa7-d2c9-416b-a4f6-afd9a91a890e\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_65d32aa7-d2c9-416b-a4f6-afd9a91a890e button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X"}},"metadata":{},"execution_count":8}]},{"cell_type":"code","source":["# target\n","y = df['LN_IC50']\n","\n","y"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":458},"id":"2IE-80mz5Tng","executionInfo":{"status":"ok","timestamp":1745061207390,"user_tz":-480,"elapsed":4,"user":{"displayName":"MDS02","userId":"02127473625043959214"}},"outputId":"a3a8e1a2-0768-4172-b8c1-f3ef976330b7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0      -2.834766\n","1      -2.717499\n","2       2.928827\n","3       1.747744\n","4      -5.785839\n","          ...   \n","4028    6.504184\n","4029    5.818486\n","4030    1.944143\n","4031    2.978849\n","4032    5.825014\n","Name: LN_IC50, Length: 4033, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>LN_IC50</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-2.834766</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>-2.717499</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2.928827</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.747744</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-5.785839</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4028</th>\n","      <td>6.504184</td>\n","    </tr>\n","    <tr>\n","      <th>4029</th>\n","      <td>5.818486</td>\n","    </tr>\n","    <tr>\n","      <th>4030</th>\n","      <td>1.944143</td>\n","    </tr>\n","    <tr>\n","      <th>4031</th>\n","      <td>2.978849</td>\n","    </tr>\n","    <tr>\n","      <th>4032</th>\n","      <td>5.825014</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>4033 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":9}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"oDEaVqF_llwO"},"outputs":[],"source":["# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"T0hNLpmAln2Y"},"outputs":[],"source":["# Standardize features by removing the mean and scaling to unit variance\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)"]},{"cell_type":"code","source":["# Checking the scale\n","X_train_scaled"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"UWiuZLQNZkzy","executionInfo":{"status":"ok","timestamp":1745061211406,"user_tz":-480,"elapsed":4,"user":{"displayName":"MDS02","userId":"02127473625043959214"}},"outputId":"d4da4752-ac70-4710-c525-65f86f224f5b"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.10656601,  1.05626562,  1.55785457, ..., -0.22542035,\n","        -0.3329888 ,  1.02893679],\n","       [ 0.68463165, -0.29175119, -0.98615689, ..., -0.22542035,\n","        -0.3329888 ,  1.02893679],\n","       [ 0.68415204, -0.29175119,  1.43564132, ..., -0.22542035,\n","        -0.3329888 ,  1.02893679],\n","       ...,\n","       [-1.42698645, -0.29175119, -0.88518143, ..., -0.22542035,\n","        -0.3329888 ,  1.02893679],\n","       [-2.5427609 , -0.29175119, -1.07813798, ..., -0.22542035,\n","         3.00310398, -0.971877  ],\n","       [-1.30009587, -0.29175119,  0.05641564, ..., -0.22542035,\n","        -0.3329888 ,  1.02893679]])"]},"metadata":{},"execution_count":12}]},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"G_pgd6N05v0c"}},{"cell_type":"markdown","source":["# **Finding the best configuration by training & assessing performance in each config**"],"metadata":{"id":"BG3viI-qkATT"}},{"cell_type":"code","execution_count":null,"metadata":{"id":"ic6XOI-Elo-S"},"outputs":[],"source":["# Hyperparameter tuning\n","# Define configurations for neurons and activation functions for each layer\n","neurons_list_layer1 = [64, 128, 256]\n","activation_list_layer1 = ['relu']\n","neurons_list_layer2 = [32, 64, 128]\n","activation_list_layer2 = ['relu']"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"hCwwjtB4lq4W"},"outputs":[],"source":["# Initialize variables to store best results\n","best_rmse = np.inf\n","best_r2 = 0\n","best_mae = 0\n","best_mse = 0\n","best_pearson_corr = 0\n","\n","patience_list = [10, 15, 20]  # try different patience values\n","best_patience = None\n","\n","# test with 200 epoch size"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yBg8tNKtlt0r","outputId":"cfd5c10f-b3aa-4156-f986-6131e221b239","executionInfo":{"status":"ok","timestamp":1745062232110,"user_tz":-480,"elapsed":992750,"user":{"displayName":"MDS02","userId":"02127473625043959214"}}},"outputs":[{"output_type":"stream","name":"stdout","text":["Training with patience=10, Layer1: 64-relu, Layer2: 32-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step\n","RMSE (patience=10): 1.4799\n","Training with patience=10, Layer1: 64-relu, Layer2: 64-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 10ms/step\n","RMSE (patience=10): 1.6442\n","Training with patience=10, Layer1: 64-relu, Layer2: 128-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","RMSE (patience=10): 1.3886\n","Training with patience=10, Layer1: 128-relu, Layer2: 32-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step\n","RMSE (patience=10): 1.5148\n","Training with patience=10, Layer1: 128-relu, Layer2: 64-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","RMSE (patience=10): 1.4938\n","Training with patience=10, Layer1: 128-relu, Layer2: 128-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step\n","RMSE (patience=10): 1.3771\n","Training with patience=10, Layer1: 256-relu, Layer2: 32-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step\n","RMSE (patience=10): 1.4971\n","Training with patience=10, Layer1: 256-relu, Layer2: 64-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step\n","RMSE (patience=10): 1.4389\n","Training with patience=10, Layer1: 256-relu, Layer2: 128-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","RMSE (patience=10): 1.4063\n","Training with patience=15, Layer1: 64-relu, Layer2: 32-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","RMSE (patience=15): 1.3372\n","Training with patience=15, Layer1: 64-relu, Layer2: 64-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","RMSE (patience=15): 1.4007\n","Training with patience=15, Layer1: 64-relu, Layer2: 128-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","RMSE (patience=15): 1.4128\n","Training with patience=15, Layer1: 128-relu, Layer2: 32-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","RMSE (patience=15): 1.5009\n","Training with patience=15, Layer1: 128-relu, Layer2: 64-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","RMSE (patience=15): 1.4039\n","Training with patience=15, Layer1: 128-relu, Layer2: 128-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","RMSE (patience=15): 1.3210\n","Training with patience=15, Layer1: 256-relu, Layer2: 32-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","RMSE (patience=15): 1.4021\n","Training with patience=15, Layer1: 256-relu, Layer2: 64-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","RMSE (patience=15): 1.4138\n","Training with patience=15, Layer1: 256-relu, Layer2: 128-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","RMSE (patience=15): 1.5024\n","Training with patience=20, Layer1: 64-relu, Layer2: 32-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","RMSE (patience=20): 1.3698\n","Training with patience=20, Layer1: 64-relu, Layer2: 64-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","RMSE (patience=20): 1.3474\n","Training with patience=20, Layer1: 64-relu, Layer2: 128-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","RMSE (patience=20): 1.3933\n","Training with patience=20, Layer1: 128-relu, Layer2: 32-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","RMSE (patience=20): 1.3339\n","Training with patience=20, Layer1: 128-relu, Layer2: 64-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","RMSE (patience=20): 1.3625\n","Training with patience=20, Layer1: 128-relu, Layer2: 128-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","RMSE (patience=20): 1.2517\n","Training with patience=20, Layer1: 256-relu, Layer2: 32-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","RMSE (patience=20): 1.3763\n","Training with patience=20, Layer1: 256-relu, Layer2: 64-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","RMSE (patience=20): 1.2402\n","Training with patience=20, Layer1: 256-relu, Layer2: 128-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","RMSE (patience=20): 1.3770\n","\n","Best configuration:\n","Neurons/Activations: (256, 'relu', 64, 'relu')\n","Patience: 20\n","Root Mean Squared Error (RMSE): 1.2402148994618778\n","Mean Absolute Error (MAE): 0.9561687084791888\n","Mean Squared Error (MSE): 1.538132996847236\n","Pearson Correlation: 0.8938239135726701\n","R-squared (R2): 0.797421212150082\n"]}],"source":["for patience_val in patience_list:\n","    for neurons_layer1 in neurons_list_layer1:\n","        for activation_layer1 in activation_list_layer1:\n","            for neurons_layer2 in neurons_list_layer2:\n","                for activation_layer2 in activation_list_layer2:\n","                    print(f\"Training with patience={patience_val}, Layer1: {neurons_layer1}-{activation_layer1}, Layer2: {neurons_layer2}-{activation_layer2}\")\n","\n","                    # Build the model\n","                    model = Sequential()\n","                    model.add(Dense(neurons_layer1, activation=activation_layer1, input_shape=(X_train.shape[1],)))\n","                    model.add(Dense(neurons_layer2, activation=activation_layer2))\n","                    model.add(Dense(1))\n","\n","                    # Compile\n","                    model.compile(optimizer='adam', loss='mean_squared_error')\n","\n","                    # Early stopping with current patience value\n","                    early_stopping = EarlyStopping(monitor='val_loss', patience=patience_val, restore_best_weights=True)\n","\n","                    # Train\n","                    model.fit(X_train_scaled, y_train, epochs=200, batch_size=32,\n","                              validation_split=0.2, callbacks=[early_stopping], verbose=0)\n","\n","                    # Predict\n","                    y_pred = model.predict(X_test_scaled)\n","\n","\n","                    y_test_np = np.array(y_test)\n","                    y_pred_np = np.squeeze(y_pred)\n","\n","\n","                    # Remove NaNs\n","                    nan_indices = np.isnan(y_pred_np)\n","                    y_test_np = y_test_np[~nan_indices]\n","                    y_pred_np = y_pred_np[~nan_indices]\n","\n","\n","                    # Evaluate\n","                    rmse = np.sqrt(mean_squared_error(y_test_np, y_pred_np))\n","                    r2 = r2_score(y_test_np, y_pred)\n","                    mae = mean_absolute_error(y_test_np, y_pred_np)\n","                    mse = mean_squared_error(y_test_np, y_pred_np)\n","                    pearson_corr, _ = pearsonr(y_test_np, y_pred_np)\n","\n","                    print(f\"RMSE (patience={patience_val}): {rmse:.4f}\")\n","\n","                    # Track best\n","                    if rmse < best_rmse:\n","                        best_rmse = rmse\n","                        best_config = (neurons_layer1, activation_layer1, neurons_layer2, activation_layer2)\n","                        best_patience = patience_val\n","                        best_mae = mae\n","                        best_mse = mse\n","                        best_pearson_corr = pearson_corr\n","                        best_r2 = r2\n","\n","                    # clear the session to free GPU RAM\n","                    K.clear_session()\n","\n","\n","print(\"\\nBest configuration:\")\n","print(f\"Neurons/Activations: {best_config}\")\n","print(f\"Patience: {best_patience}\")\n","print(\"Root Mean Squared Error (RMSE):\", best_rmse)\n","print(\"Mean Absolute Error (MAE):\", best_mae)\n","print(\"Mean Squared Error (MSE):\", best_mse)\n","print(\"Pearson Correlation:\", best_pearson_corr)\n","print(\"R-squared (R2):\", best_r2)"]},{"cell_type":"markdown","metadata":{"id":"FE820tYHHcF_"},"source":["## **Best configuration Found:**\n","\n","*   **Neurons/Activations:** (256, 'relu', 64, 'relu')\n","*   **Patience:** 20\n","*   **RMSE:** 1.240\n","*   **MAE:** 0.956\n","*   **MSE:** 1.538\n","*   **Pearson Correlation:** 0.8938\n","*   **R-squared:** 0.7974\n","\n"]},{"cell_type":"markdown","source":["\n","\n","---\n","\n"],"metadata":{"id":"SN5HjhS95yIU"}},{"cell_type":"markdown","source":["# **Repeat the model 15 times to find the lowest score from there**"],"metadata":{"id":"FZdVl1aHjYQj"}},{"cell_type":"code","source":["# Build the deep learning model using the best parameters\n","\n","best_rmse = np.inf\n","best_r2 = 0\n","best_mae = 0\n","best_mse = 0\n","best_pearson_corr = 0\n","\n","\n","for test_number in range(15):\n","\n","    print(f\"loop number {test_number}\")\n","\n","    model = Sequential()\n","    model.add(Dense(256, activation='relu', input_shape=(X_train.shape[1],)))\n","    model.add(Dense(64, activation='relu'))\n","    model.add(Dense(1))\n","\n","    # Compile the model\n","    model.compile(optimizer='adam', loss='mean_squared_error')\n","\n","    # Early stopping ~ experiment patience with 5, 10, 15, 20\n","    early_stopping = EarlyStopping(monitor='val_loss', patience = 20, restore_best_weights=True)\n","\n","    # Train the model with early stopping\n","    model.fit(X_train_scaled, y_train, epochs=200, batch_size=32, validation_split=0.2, callbacks=[early_stopping], verbose=0)\n","\n","    # Predict on the test set\n","    y_pred = model.predict(X_test_scaled)\n","\n","\n","    # Convert predictions to numpy arrays\n","    y_test_np = np.array(y_test)\n","    y_pred_np = np.squeeze(y_pred)      # This neccessary?\n","\n","    # Remove NaN values from predictions\n","    nan_indices = np.isnan(y_pred_np)\n","    y_test_np = y_test_np[~nan_indices]\n","    y_pred_np = y_pred_np[~nan_indices]\n","\n","    # Evaluation metrics\n","    rmse = np.sqrt(mean_squared_error(y_test_np, y_pred_np))\n","    mae = mean_absolute_error(y_test_np, y_pred_np)\n","    mse = mean_squared_error(y_test_np, y_pred_np)\n","    pearson_corr, _ = pearsonr(y_test_np, y_pred_np)\n","    r2 = r2_score(y_test_np, y_pred_np)\n","\n","\n","    if rmse < best_rmse:\n","        best_rmse = rmse\n","        best_mae = mae\n","        best_mse = mse\n","        best_pearson_corr = pearson_corr\n","        best_r2 = r2\n","\n","\n","    if rmse <= 1.3:\n","        print(\"Found rmse <= 1.3\")\n","        print(\"Loop rmse:\", rmse)\n","        print(\"Loop MAE:\", mae)\n","        print(\"Loop MSE:\", mse)\n","        print(\"Loop Pearson Correlation:\", pearson_corr)\n","        print(\"Loop R-squared:\", r2)\n","        print(\"-----------------------------------\")\n","\n","    # clear the session\n","    K.clear_session()\n","\n","\n","print(\"Root Mean Squared Error (RMSE):\", best_rmse)\n","print(\"Mean Absolute Error (MAE):\", best_mae)\n","print(\"Mean Squared Error (MSE):\", best_mse)\n","print(\"Pearson Correlation:\", best_pearson_corr)\n","print(\"R-squared (R2):\", best_r2)"],"metadata":{"id":"YG7ihUv4jV2J","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1745065301935,"user_tz":-480,"elapsed":715672,"user":{"displayName":"MDS02","userId":"02127473625043959214"}},"outputId":"ac091c10-a94b-4201-c1bb-8e0da317ab8e"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["loop number 0\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","loop number 1\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","loop number 2\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","Found rmse <= 1.3\n","Loop rmse: 1.2712900720412565\n","Loop MAE: 0.9688942750753736\n","Loop MSE: 1.6161784472706635\n","Loop Pearson Correlation: 0.8930804261160964\n","Loop R-squared: 0.7871422877811322\n","-----------------------------------\n","loop number 3\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","loop number 4\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","loop number 5\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","loop number 6\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","Found rmse <= 1.3\n","Loop rmse: 1.259718632438203\n","Loop MAE: 0.9532562658652349\n","Loop MSE: 1.5868910329119768\n","Loop Pearson Correlation: 0.8896079618274091\n","Loop R-squared: 0.790999567296104\n","-----------------------------------\n","loop number 7\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","Found rmse <= 1.3\n","Loop rmse: 1.284987726748722\n","Loop MAE: 0.9925731753453854\n","Loop MSE: 1.651193457894848\n","Loop Pearson Correlation: 0.8869267075836511\n","Loop R-squared: 0.7825306589926343\n","-----------------------------------\n","loop number 8\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","loop number 9\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","loop number 10\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","Found rmse <= 1.3\n","Loop rmse: 1.2813975536793771\n","Loop MAE: 0.9780128710485279\n","Loop MSE: 1.6419796905754922\n","Loop Pearson Correlation: 0.8862546694361868\n","Loop R-squared: 0.7837441521163837\n","-----------------------------------\n","loop number 11\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","loop number 12\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","Found rmse <= 1.3\n","Loop rmse: 1.219783120449689\n","Loop MAE: 0.9524822863575914\n","Loop MSE: 1.4878708609339804\n","Loop Pearson Correlation: 0.8967536855177405\n","Loop R-squared: 0.8040409534786443\n","-----------------------------------\n","loop number 13\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","loop number 14\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m26/26\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 6ms/step\n","Root Mean Squared Error (RMSE): 1.219783120449689\n","Mean Absolute Error (MAE): 0.9524822863575914\n","Mean Squared Error (MSE): 1.4878708609339804\n","Pearson Correlation: 0.8967536855177405\n","R-squared (R2): 0.8040409534786443\n"]}]}],"metadata":{"colab":{"provenance":[{"file_id":"1p6tyAoMxyOvg5SgiLkAL_hI5Ul7FE9hl","timestamp":1744299982205},{"file_id":"1PQejgZjHbeCa5H0i84QxZ6A4d0E69OzM","timestamp":1743966186969},{"file_id":"1OloWxWI2i_q0loLkk05Y0x5QMI9YR9ek","timestamp":1743189075126}],"machine_shape":"hm","gpuType":"T4"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"},"accelerator":"GPU"},"nbformat":4,"nbformat_minor":0}
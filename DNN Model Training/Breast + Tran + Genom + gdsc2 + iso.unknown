{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"executionInfo":{"elapsed":417,"status":"ok","timestamp":1745065418063,"user":{"displayName":"MDS02","userId":"02127473625043959214"},"user_tz":-480},"id":"M5HF6MmfcjwR"},"outputs":[],"source":["import pandas as pd\n","import numpy as np"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":23787,"status":"ok","timestamp":1745065441853,"user":{"displayName":"MDS02","userId":"02127473625043959214"},"user_tz":-480},"id":"F0sWDwL84ote","outputId":"393146a3-685f-4320-9538-e38c42ef620b"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":3,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":1204,"status":"ok","timestamp":1745065445606,"user":{"displayName":"MDS02","userId":"02127473625043959214"},"user_tz":-480},"id":"CLlGbW844xtF","outputId":"f9e6f6d6-3931-43b2-ff88-fccb63bece07"},"outputs":[{"output_type":"stream","name":"stdout","text":[" BC_trans_gdsc2_iso.csv\n"," BC_trans_genom_gdsc2_iso.csv\n"," BC_trans_proteo_gdsc2_iso.csv\n","'Breast + Tran + gdsc2 + iso'\n","'Breast + Tran + Genom + gdsc2 + iso'\n","'Breast + Tran + Proteo + gdsc2 + iso'\n"," CC_BC_trans_gdsc2_iso.csv\n"," CC_BC_trans_proteo_gdsc2_iso.csv\n","'Colon & Breast + Trans + gdsc2 + iso.ipynb'\n","'Colon & Breast + Trans + Proteo + gdsc2 + iso'\n"," Experiment\n"," GDSC1\n"," pre-processing\n"," raw_data\n"]}],"source":["# Group\n","!ls '/content/drive/My Drive/Colab Notebooks'"]},{"cell_type":"markdown","metadata":{"id":"wFshTNLEpjbc"},"source":["## **Transcrip + Proteo Dataset**"]},{"cell_type":"code","execution_count":4,"metadata":{"executionInfo":{"elapsed":98514,"status":"ok","timestamp":1745065550404,"user":{"displayName":"MDS02","userId":"02127473625043959214"},"user_tz":-480},"id":"SCUcqeG943Bk"},"outputs":[],"source":["df = pd.read_csv(\"/content/drive/My Drive/Colab Notebooks/BC_trans_genom_gdsc2_iso.csv\")\n","\n","df.drop(columns = ['Unnamed: 0'], inplace=True, axis=1)"]},{"cell_type":"code","execution_count":5,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":441},"executionInfo":{"elapsed":41,"status":"ok","timestamp":1745065550448,"user":{"displayName":"MDS02","userId":"02127473625043959214"},"user_tz":-480},"id":"b02Vqp_ohSXr","outputId":"84b29fc7-b763-4854-8331-998ff141ef9a"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      DRUG_ID     DRUG_NAME      CCLE_Name  COSMIC_ID  TSPAN6 (7105)  \\\n","0        1003  Camptothecin  ZR7530_BREAST     909907       3.472488   \n","1        1004   Vinblastine  ZR7530_BREAST     909907       3.472488   \n","2        1005     Cisplatin  ZR7530_BREAST     909907       3.472488   \n","3        1006    Cytarabine  ZR7530_BREAST     909907       3.472488   \n","4        1007     Docetaxel  ZR7530_BREAST     909907       3.472488   \n","...       ...           ...            ...        ...            ...   \n","3234     2045       AMG-319   BT549_BREAST     905951       3.390943   \n","3235     2046       MK-8776   BT549_BREAST     905951       3.390943   \n","3236     2048   Vinorelbine   BT549_BREAST     905951       3.390943   \n","3237     2106    Uprosertib   BT549_BREAST     905951       3.390943   \n","3238     2169       AZD6482   BT549_BREAST     905951       3.390943   \n","\n","      TNMD (64102)  DPM1 (8813)  SCYL3 (57147)  C1orf112 (55732)  FGR (2268)  \\\n","0              0.0     5.959306       3.878725          3.646163    0.000000   \n","1              0.0     5.959306       3.878725          3.646163    0.000000   \n","2              0.0     5.959306       3.878725          3.646163    0.000000   \n","3              0.0     5.959306       3.878725          3.646163    0.000000   \n","4              0.0     5.959306       3.878725          3.646163    0.000000   \n","...            ...          ...            ...               ...         ...   \n","3234           0.0     7.142924       2.169925          4.195348    0.014355   \n","3235           0.0     7.142924       2.169925          4.195348    0.014355   \n","3236           0.0     7.142924       2.169925          4.195348    0.014355   \n","3237           0.0     7.142924       2.169925          4.195348    0.014355   \n","3238           0.0     7.142924       2.169925          4.195348    0.014355   \n","\n","      ...  247  248  249  250  251  252  253  254  255   LN_IC50  \n","0     ...    0    1    0    1    0    0    0    0    0  2.824561  \n","1     ...    1    0    1    0    1    0    0    0    0  2.247699  \n","2     ...    0    0    0    0    0    0    0    0    0  6.461361  \n","3     ...    0    0    0    1    1    0    0    0    0  4.863325  \n","4     ...    0    1    1    1    1    0    0    0    0 -1.042408  \n","...   ...  ...  ...  ...  ...  ...  ...  ...  ...  ...       ...  \n","3234  ...    0    0    0    1    0    0    0    0    0  5.256057  \n","3235  ...    0    0    0    0    1    0    0    0    1  2.591551  \n","3236  ...    1    0    1    1    1    0    0    0    0 -1.944162  \n","3237  ...    0    0    1    0    0    0    0    0    1  3.244934  \n","3238  ...    0    0    0    0    0    0    0    0    0  3.516013  \n","\n","[3239 rows x 56182 columns]"],"text/html":["\n","  <div id=\"df-9fed47fc-0f09-4942-a57e-1c45a3304806\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>DRUG_ID</th>\n","      <th>DRUG_NAME</th>\n","      <th>CCLE_Name</th>\n","      <th>COSMIC_ID</th>\n","      <th>TSPAN6 (7105)</th>\n","      <th>TNMD (64102)</th>\n","      <th>DPM1 (8813)</th>\n","      <th>SCYL3 (57147)</th>\n","      <th>C1orf112 (55732)</th>\n","      <th>FGR (2268)</th>\n","      <th>...</th>\n","      <th>247</th>\n","      <th>248</th>\n","      <th>249</th>\n","      <th>250</th>\n","      <th>251</th>\n","      <th>252</th>\n","      <th>253</th>\n","      <th>254</th>\n","      <th>255</th>\n","      <th>LN_IC50</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1003</td>\n","      <td>Camptothecin</td>\n","      <td>ZR7530_BREAST</td>\n","      <td>909907</td>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2.824561</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1004</td>\n","      <td>Vinblastine</td>\n","      <td>ZR7530_BREAST</td>\n","      <td>909907</td>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2.247699</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1005</td>\n","      <td>Cisplatin</td>\n","      <td>ZR7530_BREAST</td>\n","      <td>909907</td>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>6.461361</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1006</td>\n","      <td>Cytarabine</td>\n","      <td>ZR7530_BREAST</td>\n","      <td>909907</td>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>4.863325</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>1007</td>\n","      <td>Docetaxel</td>\n","      <td>ZR7530_BREAST</td>\n","      <td>909907</td>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-1.042408</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3234</th>\n","      <td>2045</td>\n","      <td>AMG-319</td>\n","      <td>BT549_BREAST</td>\n","      <td>905951</td>\n","      <td>3.390943</td>\n","      <td>0.0</td>\n","      <td>7.142924</td>\n","      <td>2.169925</td>\n","      <td>4.195348</td>\n","      <td>0.014355</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>5.256057</td>\n","    </tr>\n","    <tr>\n","      <th>3235</th>\n","      <td>2046</td>\n","      <td>MK-8776</td>\n","      <td>BT549_BREAST</td>\n","      <td>905951</td>\n","      <td>3.390943</td>\n","      <td>0.0</td>\n","      <td>7.142924</td>\n","      <td>2.169925</td>\n","      <td>4.195348</td>\n","      <td>0.014355</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>2.591551</td>\n","    </tr>\n","    <tr>\n","      <th>3236</th>\n","      <td>2048</td>\n","      <td>Vinorelbine</td>\n","      <td>BT549_BREAST</td>\n","      <td>905951</td>\n","      <td>3.390943</td>\n","      <td>0.0</td>\n","      <td>7.142924</td>\n","      <td>2.169925</td>\n","      <td>4.195348</td>\n","      <td>0.014355</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>-1.944162</td>\n","    </tr>\n","    <tr>\n","      <th>3237</th>\n","      <td>2106</td>\n","      <td>Uprosertib</td>\n","      <td>BT549_BREAST</td>\n","      <td>905951</td>\n","      <td>3.390943</td>\n","      <td>0.0</td>\n","      <td>7.142924</td>\n","      <td>2.169925</td>\n","      <td>4.195348</td>\n","      <td>0.014355</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>3.244934</td>\n","    </tr>\n","    <tr>\n","      <th>3238</th>\n","      <td>2169</td>\n","      <td>AZD6482</td>\n","      <td>BT549_BREAST</td>\n","      <td>905951</td>\n","      <td>3.390943</td>\n","      <td>0.0</td>\n","      <td>7.142924</td>\n","      <td>2.169925</td>\n","      <td>4.195348</td>\n","      <td>0.014355</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3.516013</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3239 rows × 56182 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9fed47fc-0f09-4942-a57e-1c45a3304806')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-9fed47fc-0f09-4942-a57e-1c45a3304806 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-9fed47fc-0f09-4942-a57e-1c45a3304806');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9226612c-4d48-431b-8bdc-28ffd58aa659\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9226612c-4d48-431b-8bdc-28ffd58aa659')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9226612c-4d48-431b-8bdc-28ffd58aa659 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_13868d03-a5ec-47e8-b502-0e612caf592f\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('df')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_13868d03-a5ec-47e8-b502-0e612caf592f button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('df');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"df"}},"metadata":{},"execution_count":5}],"source":["df\n","# 3239 rows × 56182 columns"]},{"cell_type":"markdown","metadata":{"id":"ZQEGcaCdlXyK"},"source":["# **Perform the deep learning (transcrip + genomics)**"]},{"cell_type":"code","execution_count":6,"metadata":{"executionInfo":{"elapsed":2990,"status":"ok","timestamp":1745065561154,"user":{"displayName":"MDS02","userId":"02127473625043959214"},"user_tz":-480},"id":"JqSN2Sy1leNO"},"outputs":[],"source":["import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.preprocessing import StandardScaler\n","from tensorflow.keras.models import Sequential\n","from tensorflow.keras.layers import Dense\n","from tensorflow.keras.callbacks import EarlyStopping\n","from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score\n","from scipy.stats import pearsonr\n","from sklearn.metrics import r2_score"]},{"cell_type":"code","execution_count":7,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":441},"executionInfo":{"elapsed":443,"status":"ok","timestamp":1745065562546,"user":{"displayName":"MDS02","userId":"02127473625043959214"},"user_tz":-480},"id":"WHbFJowG5Lsy","outputId":"d00ff3c1-e60c-435e-8ea2-cb420669661d"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      TSPAN6 (7105)  TNMD (64102)  DPM1 (8813)  SCYL3 (57147)  \\\n","0          3.472488           0.0     5.959306       3.878725   \n","1          3.472488           0.0     5.959306       3.878725   \n","2          3.472488           0.0     5.959306       3.878725   \n","3          3.472488           0.0     5.959306       3.878725   \n","4          3.472488           0.0     5.959306       3.878725   \n","...             ...           ...          ...            ...   \n","3234       3.390943           0.0     7.142924       2.169925   \n","3235       3.390943           0.0     7.142924       2.169925   \n","3236       3.390943           0.0     7.142924       2.169925   \n","3237       3.390943           0.0     7.142924       2.169925   \n","3238       3.390943           0.0     7.142924       2.169925   \n","\n","      C1orf112 (55732)  FGR (2268)  CFH (3075)  FUCA2 (2519)  GCLC (2729)  \\\n","0             3.646163    0.000000    0.042644      4.711495     5.472488   \n","1             3.646163    0.000000    0.042644      4.711495     5.472488   \n","2             3.646163    0.000000    0.042644      4.711495     5.472488   \n","3             3.646163    0.000000    0.042644      4.711495     5.472488   \n","4             3.646163    0.000000    0.042644      4.711495     5.472488   \n","...                ...         ...         ...           ...          ...   \n","3234          4.195348    0.014355    2.356144      6.644722     4.189034   \n","3235          4.195348    0.014355    2.356144      6.644722     4.189034   \n","3236          4.195348    0.014355    2.356144      6.644722     4.189034   \n","3237          4.195348    0.014355    2.356144      6.644722     4.189034   \n","3238          4.195348    0.014355    2.356144      6.644722     4.189034   \n","\n","      NFYA (4800)  ...  246  247  248  249  250  251  252  253  254  255  \n","0        3.932628  ...    0    0    1    0    1    0    0    0    0    0  \n","1        3.932628  ...    0    1    0    1    0    1    0    0    0    0  \n","2        3.932628  ...    0    0    0    0    0    0    0    0    0    0  \n","3        3.932628  ...    0    0    0    0    1    1    0    0    0    0  \n","4        3.932628  ...    0    0    1    1    1    1    0    0    0    0  \n","...           ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  ...  \n","3234     4.534809  ...    0    0    0    0    1    0    0    0    0    0  \n","3235     4.534809  ...    0    0    0    0    0    1    0    0    0    1  \n","3236     4.534809  ...    0    1    0    1    1    1    0    0    0    0  \n","3237     4.534809  ...    0    0    0    1    0    0    0    0    0    1  \n","3238     4.534809  ...    1    0    0    0    0    0    0    0    0    0  \n","\n","[3239 rows x 56177 columns]"],"text/html":["\n","  <div id=\"df-087dfc49-49b9-40f4-9284-9a96cb869fc5\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>TSPAN6 (7105)</th>\n","      <th>TNMD (64102)</th>\n","      <th>DPM1 (8813)</th>\n","      <th>SCYL3 (57147)</th>\n","      <th>C1orf112 (55732)</th>\n","      <th>FGR (2268)</th>\n","      <th>CFH (3075)</th>\n","      <th>FUCA2 (2519)</th>\n","      <th>GCLC (2729)</th>\n","      <th>NFYA (4800)</th>\n","      <th>...</th>\n","      <th>246</th>\n","      <th>247</th>\n","      <th>248</th>\n","      <th>249</th>\n","      <th>250</th>\n","      <th>251</th>\n","      <th>252</th>\n","      <th>253</th>\n","      <th>254</th>\n","      <th>255</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>0.042644</td>\n","      <td>4.711495</td>\n","      <td>5.472488</td>\n","      <td>3.932628</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>0.042644</td>\n","      <td>4.711495</td>\n","      <td>5.472488</td>\n","      <td>3.932628</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>0.042644</td>\n","      <td>4.711495</td>\n","      <td>5.472488</td>\n","      <td>3.932628</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>0.042644</td>\n","      <td>4.711495</td>\n","      <td>5.472488</td>\n","      <td>3.932628</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>3.472488</td>\n","      <td>0.0</td>\n","      <td>5.959306</td>\n","      <td>3.878725</td>\n","      <td>3.646163</td>\n","      <td>0.000000</td>\n","      <td>0.042644</td>\n","      <td>4.711495</td>\n","      <td>5.472488</td>\n","      <td>3.932628</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3234</th>\n","      <td>3.390943</td>\n","      <td>0.0</td>\n","      <td>7.142924</td>\n","      <td>2.169925</td>\n","      <td>4.195348</td>\n","      <td>0.014355</td>\n","      <td>2.356144</td>\n","      <td>6.644722</td>\n","      <td>4.189034</td>\n","      <td>4.534809</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3235</th>\n","      <td>3.390943</td>\n","      <td>0.0</td>\n","      <td>7.142924</td>\n","      <td>2.169925</td>\n","      <td>4.195348</td>\n","      <td>0.014355</td>\n","      <td>2.356144</td>\n","      <td>6.644722</td>\n","      <td>4.189034</td>\n","      <td>4.534809</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3236</th>\n","      <td>3.390943</td>\n","      <td>0.0</td>\n","      <td>7.142924</td>\n","      <td>2.169925</td>\n","      <td>4.195348</td>\n","      <td>0.014355</td>\n","      <td>2.356144</td>\n","      <td>6.644722</td>\n","      <td>4.189034</td>\n","      <td>4.534809</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>3237</th>\n","      <td>3.390943</td>\n","      <td>0.0</td>\n","      <td>7.142924</td>\n","      <td>2.169925</td>\n","      <td>4.195348</td>\n","      <td>0.014355</td>\n","      <td>2.356144</td>\n","      <td>6.644722</td>\n","      <td>4.189034</td>\n","      <td>4.534809</td>\n","      <td>...</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3238</th>\n","      <td>3.390943</td>\n","      <td>0.0</td>\n","      <td>7.142924</td>\n","      <td>2.169925</td>\n","      <td>4.195348</td>\n","      <td>0.014355</td>\n","      <td>2.356144</td>\n","      <td>6.644722</td>\n","      <td>4.189034</td>\n","      <td>4.534809</td>\n","      <td>...</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3239 rows × 56177 columns</p>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-087dfc49-49b9-40f4-9284-9a96cb869fc5')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-087dfc49-49b9-40f4-9284-9a96cb869fc5 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-087dfc49-49b9-40f4-9284-9a96cb869fc5');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-c3124fde-01e4-4efd-bb7f-cd3d29e1e591\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-c3124fde-01e4-4efd-bb7f-cd3d29e1e591')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-c3124fde-01e4-4efd-bb7f-cd3d29e1e591 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_a5e2fdea-6653-4182-bf17-21066f2f8147\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('X')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_a5e2fdea-6653-4182-bf17-21066f2f8147 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('X');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"X"}},"metadata":{},"execution_count":7}],"source":["# training\n","X = df.drop(columns=['DRUG_ID', 'DRUG_NAME', 'COSMIC_ID', 'LN_IC50', 'CCLE_Name'])\n","\n","X"]},{"cell_type":"code","execution_count":8,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":458},"executionInfo":{"elapsed":9,"status":"ok","timestamp":1745065563462,"user":{"displayName":"MDS02","userId":"02127473625043959214"},"user_tz":-480},"id":"2IE-80mz5Tng","outputId":"979eb44e-3507-478f-e102-e7b15576a0a5"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["0       2.824561\n","1       2.247699\n","2       6.461361\n","3       4.863325\n","4      -1.042408\n","          ...   \n","3234    5.256057\n","3235    2.591551\n","3236   -1.944162\n","3237    3.244934\n","3238    3.516013\n","Name: LN_IC50, Length: 3239, dtype: float64"],"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>LN_IC50</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>2.824561</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2.247699</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>6.461361</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4.863325</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-1.042408</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>3234</th>\n","      <td>5.256057</td>\n","    </tr>\n","    <tr>\n","      <th>3235</th>\n","      <td>2.591551</td>\n","    </tr>\n","    <tr>\n","      <th>3236</th>\n","      <td>-1.944162</td>\n","    </tr>\n","    <tr>\n","      <th>3237</th>\n","      <td>3.244934</td>\n","    </tr>\n","    <tr>\n","      <th>3238</th>\n","      <td>3.516013</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>3239 rows × 1 columns</p>\n","</div><br><label><b>dtype:</b> float64</label>"]},"metadata":{},"execution_count":8}],"source":["# target\n","y = df['LN_IC50']\n","\n","y"]},{"cell_type":"code","execution_count":9,"metadata":{"executionInfo":{"elapsed":702,"status":"ok","timestamp":1745065565184,"user":{"displayName":"MDS02","userId":"02127473625043959214"},"user_tz":-480},"id":"oDEaVqF_llwO"},"outputs":[],"source":["# Split the data into training and testing sets\n","X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)"]},{"cell_type":"code","execution_count":10,"metadata":{"executionInfo":{"elapsed":3513,"status":"ok","timestamp":1745065569428,"user":{"displayName":"MDS02","userId":"02127473625043959214"},"user_tz":-480},"id":"T0hNLpmAln2Y"},"outputs":[],"source":["# Standardize features by removing the mean and scaling to unit variance\n","scaler = StandardScaler()\n","X_train_scaled = scaler.fit_transform(X_train)\n","X_test_scaled = scaler.transform(X_test)"]},{"cell_type":"code","execution_count":11,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":6,"status":"ok","timestamp":1745065569433,"user":{"displayName":"MDS02","userId":"02127473625043959214"},"user_tz":-480},"id":"UWiuZLQNZkzy","outputId":"e22bf54c-2315-41b5-af09-ce3812d66441"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[-0.26730369, -0.24481535,  0.72948652, ..., -0.22796742,\n","        -0.33254658, -0.94332466],\n","       [ 0.37750278, -0.24481535, -1.15808904, ..., -0.22796742,\n","        -0.33254658, -0.94332466],\n","       [-0.10194015, -0.24481535,  0.36733251, ..., -0.22796742,\n","        -0.33254658, -0.94332466],\n","       ...,\n","       [ 1.46216241, -0.24481535, -0.54697615, ..., -0.22796742,\n","        -0.33254658,  1.06008042],\n","       [-0.18947817, -0.24481535,  0.36298609, ..., -0.22796742,\n","        -0.33254658,  1.06008042],\n","       [-0.22463894, -0.24481535,  0.82156138, ..., -0.22796742,\n","        -0.33254658, -0.94332466]])"]},"metadata":{},"execution_count":11}],"source":["# Checking the scale\n","X_train_scaled"]},{"cell_type":"markdown","metadata":{"id":"G_pgd6N05v0c"},"source":["\n","\n","---\n","\n"]},{"cell_type":"markdown","metadata":{"id":"IaKNrnmlPEOh"},"source":["# **Finding the best configuration by training & assessing performance in each config**"]},{"cell_type":"code","source":["from tensorflow.keras import backend as K"],"metadata":{"id":"qeHooe-Givt5","executionInfo":{"status":"ok","timestamp":1745065610528,"user_tz":-480,"elapsed":5,"user":{"displayName":"MDS02","userId":"02127473625043959214"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","execution_count":13,"metadata":{"executionInfo":{"elapsed":6,"status":"ok","timestamp":1745065612136,"user":{"displayName":"MDS02","userId":"02127473625043959214"},"user_tz":-480},"id":"ic6XOI-Elo-S"},"outputs":[],"source":["# remove for web development\n","\n","# Hyperparameter tuning\n","# Define configurations for neurons and activation functions for each layer\n","neurons_list_layer1 = [64, 128, 256]\n","activation_list_layer1 = ['relu']\n","neurons_list_layer2 = [32, 64, 128]\n","activation_list_layer2 = ['relu']"]},{"cell_type":"code","execution_count":14,"metadata":{"executionInfo":{"elapsed":4,"status":"ok","timestamp":1745065615123,"user":{"displayName":"MDS02","userId":"02127473625043959214"},"user_tz":-480},"id":"hCwwjtB4lq4W"},"outputs":[],"source":["# remove for web development\n","\n","# Initialize variables to store best results\n","best_rmse = np.inf\n","best_r2 = 0\n","best_mae = 0\n","best_mse = 0\n","best_pearson_corr = 0\n","\n","patience_list = [15, 20]  # try different patience values\n","best_patience = None\n","\n","# test with 200 epoch size"]},{"cell_type":"code","execution_count":15,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":982887,"status":"ok","timestamp":1745066608060,"user":{"displayName":"MDS02","userId":"02127473625043959214"},"user_tz":-480},"id":"yBg8tNKtlt0r","outputId":"383f4110-875a-4473-e719-67445fd52290"},"outputs":[{"output_type":"stream","name":"stdout","text":["Training with patience=15, Layer1: 64-relu, Layer2: 32-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 26ms/step\n","RMSE (patience=15): 2.1258\n","Training with patience=15, Layer1: 64-relu, Layer2: 64-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 14ms/step\n","RMSE (patience=15): 2.6918\n","Training with patience=15, Layer1: 64-relu, Layer2: 128-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step\n","RMSE (patience=15): 1.6602\n","Training with patience=15, Layer1: 128-relu, Layer2: 32-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 22ms/step\n","RMSE (patience=15): 2.4006\n","Training with patience=15, Layer1: 128-relu, Layer2: 64-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 12ms/step\n","RMSE (patience=15): 2.7565\n","Training with patience=15, Layer1: 128-relu, Layer2: 128-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 13ms/step\n","RMSE (patience=15): 2.0707\n","Training with patience=15, Layer1: 256-relu, Layer2: 32-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 16ms/step\n","RMSE (patience=15): 2.4268\n","Training with patience=15, Layer1: 256-relu, Layer2: 64-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step\n","RMSE (patience=15): 2.2005\n","Training with patience=15, Layer1: 256-relu, Layer2: 128-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 11ms/step\n","RMSE (patience=15): 2.3448\n","Training with patience=20, Layer1: 64-relu, Layer2: 32-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","RMSE (patience=20): 2.1256\n","Training with patience=20, Layer1: 64-relu, Layer2: 64-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","RMSE (patience=20): 2.0705\n","Training with patience=20, Layer1: 64-relu, Layer2: 128-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","RMSE (patience=20): 1.7841\n","Training with patience=20, Layer1: 128-relu, Layer2: 32-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step\n","RMSE (patience=20): 1.8809\n","Training with patience=20, Layer1: 128-relu, Layer2: 64-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","RMSE (patience=20): 1.7315\n","Training with patience=20, Layer1: 128-relu, Layer2: 128-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","RMSE (patience=20): 1.8275\n","Training with patience=20, Layer1: 256-relu, Layer2: 32-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","RMSE (patience=20): 2.0800\n","Training with patience=20, Layer1: 256-relu, Layer2: 64-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","RMSE (patience=20): 1.8927\n","Training with patience=20, Layer1: 256-relu, Layer2: 128-relu\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","RMSE (patience=20): 1.6842\n","\n","Best configuration:\n","Neurons/Activations: (64, 'relu', 128, 'relu')\n","Patience: 15\n","Root Mean Squared Error (RMSE): 1.6602409268402263\n","Mean Absolute Error (MAE): 1.2828865920660577\n","Mean Squared Error (MSE): 2.7563999351552937\n","Pearson Correlation: 0.8153272251898362\n","R-squared (R2): 0.6612789682874807\n"]}],"source":["# remove for web development\n","\n","### DO NOT RERUN\n","# Loop over configurations for layer 1\n","for patience_val in patience_list:\n","    for neurons_layer1 in neurons_list_layer1:\n","        for activation_layer1 in activation_list_layer1:\n","            for neurons_layer2 in neurons_list_layer2:\n","                for activation_layer2 in activation_list_layer2:\n","                    print(f\"Training with patience={patience_val}, Layer1: {neurons_layer1}-{activation_layer1}, Layer2: {neurons_layer2}-{activation_layer2}\")\n","\n","                    # Build the model\n","                    model = Sequential()\n","                    model.add(Dense(neurons_layer1, activation=activation_layer1, input_shape=(X_train.shape[1],)))\n","                    model.add(Dense(neurons_layer2, activation=activation_layer2))\n","                    model.add(Dense(1))\n","\n","                    # Compile\n","                    model.compile(optimizer='adam', loss='mean_squared_error')\n","\n","                    # Early stopping with current patience value\n","                    early_stopping = EarlyStopping(monitor='val_loss', patience=patience_val, restore_best_weights=True)\n","\n","                    # Train\n","                    model.fit(X_train_scaled, y_train, epochs=200, batch_size=32,\n","                              validation_split=0.2, callbacks=[early_stopping], verbose=0)\n","\n","                    # Predict\n","                    y_pred = model.predict(X_test_scaled)\n","\n","\n","                    y_test_np = np.array(y_test)\n","                    ######### Check if this squeeze is necessary?\n","                    y_pred_np = np.squeeze(y_pred)\n","\n","\n","                    # Remove NaNs\n","                    nan_indices = np.isnan(y_pred_np)\n","                    y_test_np = y_test_np[~nan_indices]\n","                    y_pred_np = y_pred_np[~nan_indices]\n","\n","\n","                    # Evaluate\n","                    rmse = np.sqrt(mean_squared_error(y_test_np, y_pred_np))\n","                    r2 = r2_score(y_test_np, y_pred)\n","                    mae = mean_absolute_error(y_test_np, y_pred_np)\n","                    mse = mean_squared_error(y_test_np, y_pred_np)\n","                    pearson_corr, _ = pearsonr(y_test_np, y_pred_np)\n","\n","                    print(f\"RMSE (patience={patience_val}): {rmse:.4f}\")\n","\n","                    # Track best\n","                    if rmse < best_rmse:\n","                        best_rmse = rmse\n","                        best_config = (neurons_layer1, activation_layer1, neurons_layer2, activation_layer2)\n","                        best_patience = patience_val\n","                        best_mae = mae\n","                        best_mse = mse\n","                        best_pearson_corr = pearson_corr\n","                        best_r2 = r2\n","\n","                    # clear the session to free GPU RAM\n","                    K.clear_session()\n","\n","\n","print(\"\\nBest configuration:\")\n","print(f\"Neurons/Activations: {best_config}\")\n","print(f\"Patience: {best_patience}\")\n","print(\"Root Mean Squared Error (RMSE):\", best_rmse)\n","print(\"Mean Absolute Error (MAE):\", best_mae)\n","print(\"Mean Squared Error (MSE):\", best_mse)\n","print(\"Pearson Correlation:\", best_pearson_corr)\n","print(\"R-squared (R2):\", best_r2)"]},{"cell_type":"markdown","metadata":{"id":"FE820tYHHcF_"},"source":["## **Best configuration Found:**\n","\n","*   **Neurons/Activations:** (64, 'relu', 128, 'relu')\n","*   **Patience:** 15\n","*   **RMSE:** 1.660\n","*   **MAE:** 1.283\n","*   **MSE:** 2.756\n","*   **Pearson Correlation:** 0.8153\n","*   **R-squared:** 0.6613\n","\n"]},{"cell_type":"markdown","metadata":{"id":"SN5HjhS95yIU"},"source":["\n","\n","---\n","\n"]},{"cell_type":"markdown","metadata":{"id":"FZdVl1aHjYQj"},"source":["# **Repeat the model 15 times to find the lowest score from there**"]},{"cell_type":"code","execution_count":16,"metadata":{"id":"YG7ihUv4jV2J","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1745068047379,"user_tz":-480,"elapsed":590833,"user":{"displayName":"MDS02","userId":"02127473625043959214"}},"outputId":"9e01cbfa-d3c0-4095-ddf4-6dacf4502f2c"},"outputs":[{"output_type":"stream","name":"stdout","text":["loop number 0\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","loop number 1\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","loop number 2\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","loop number 3\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","loop number 4\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","loop number 5\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","loop number 6\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","loop number 7\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","loop number 8\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","loop number 9\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","loop number 10\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","loop number 11\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 8ms/step\n","loop number 12\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","loop number 13\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","loop number 14\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.11/dist-packages/keras/src/layers/core/dense.py:87: UserWarning: Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n","  super().__init__(activity_regularizer=activity_regularizer, **kwargs)\n"]},{"output_type":"stream","name":"stdout","text":["\u001b[1m21/21\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 9ms/step\n","Root Mean Squared Error (RMSE): 1.6362101992326281\n","Mean Absolute Error (MAE): 1.2764612811455094\n","Mean Squared Error (MSE): 2.6771838160728767\n","Pearson Correlation: 0.8239520247570119\n","R-squared (R2): 0.6710134648101511\n"]}],"source":["# Build the deep learning model using the best parameters\n","# 256 relu & 128 relu\n","# 15 patience, 200 epochs\n","\n","best_rmse = np.inf\n","best_r2 = 0\n","best_mae = 0\n","best_mse = 0\n","best_pearson_corr = 0\n","\n","\n","for test_number in range(15):\n","\n","    print(f\"loop number {test_number}\")\n","\n","    model = Sequential()\n","    model.add(Dense(64, activation='relu', input_shape=(X_train.shape[1],)))\n","    model.add(Dense(128, activation='relu'))\n","    model.add(Dense(1))\n","\n","    # Compile the model\n","    model.compile(optimizer='adam', loss='mean_squared_error')\n","\n","    # Early stopping ~ experiment patience with 5, 10, 15, 20\n","    early_stopping = EarlyStopping(monitor='val_loss', patience = 15, restore_best_weights=True)\n","\n","    # Train the model with early stopping\n","    model.fit(X_train_scaled, y_train, epochs=200, batch_size=32, validation_split=0.2, callbacks=[early_stopping], verbose=0)\n","\n","    # Predict on the test set\n","    y_pred = model.predict(X_test_scaled)\n","\n","\n","    # Convert predictions to numpy arrays\n","    y_test_np = np.array(y_test)\n","    y_pred_np = np.squeeze(y_pred)      # This neccessary?\n","\n","    # Remove NaN values from predictions\n","    nan_indices = np.isnan(y_pred_np)\n","    y_test_np = y_test_np[~nan_indices]\n","    y_pred_np = y_pred_np[~nan_indices]\n","\n","    # Evaluation metrics\n","    rmse = np.sqrt(mean_squared_error(y_test_np, y_pred_np))\n","    mae = mean_absolute_error(y_test_np, y_pred_np)\n","    mse = mean_squared_error(y_test_np, y_pred_np)\n","    pearson_corr, _ = pearsonr(y_test_np, y_pred_np)\n","    r2 = r2_score(y_test_np, y_pred_np)\n","\n","\n","    if rmse < best_rmse:\n","        best_rmse = rmse\n","        best_mae = mae\n","        best_mse = mse\n","        best_pearson_corr = pearson_corr\n","        best_r2 = r2\n","\n","\n","    if rmse <= 1.3:\n","        print(\"Found rmse <= 1.3\")\n","        print(\"Loop rmse:\", rmse)\n","        print(\"Loop MAE:\", mae)\n","        print(\"Loop MSE:\", mse)\n","        print(\"Loop Pearson Correlation:\", pearson_corr)\n","        print(\"Loop R-squared:\", r2)\n","        print(\"-----------------------------------\")\n","\n","    # clear the session\n","    K.clear_session()\n","\n","\n","\n","\n","print(\"Root Mean Squared Error (RMSE):\", best_rmse)\n","print(\"Mean Absolute Error (MAE):\", best_mae)\n","print(\"Mean Squared Error (MSE):\", best_mse)\n","print(\"Pearson Correlation:\", best_pearson_corr)\n","print(\"R-squared (R2):\", best_r2)"]},{"cell_type":"markdown","metadata":{"id":"MZk4cMgehcaM"},"source":["------------------"]}],"metadata":{"accelerator":"GPU","colab":{"gpuType":"T4","machine_shape":"hm","provenance":[{"file_id":"1p6tyAoMxyOvg5SgiLkAL_hI5Ul7FE9hl","timestamp":1744299982205},{"file_id":"1PQejgZjHbeCa5H0i84QxZ6A4d0E69OzM","timestamp":1743966186969},{"file_id":"1OloWxWI2i_q0loLkk05Y0x5QMI9YR9ek","timestamp":1743189075126}]},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}